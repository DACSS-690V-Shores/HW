plot(services_mohr.ig3,
layout = coords3_s,
vertex.color = "tomato",
vertex.shape = "square",
vertex.label.cex = .6,
vertex.label.color = "gray30",
edge.arrow.size=0.3,
edge.curved=0.3,
edge.color="gray60")
plot(identities_mohr.ig3,
layout = coords3_i,
vertex.color = "chartreuse4",
vertex.shape = "circle",
vertex.label.cex = .6,
vertex.label.color = "gray30",
edge.arrow.size=0.3,
edge.curved=0.3,
edge.color="gray60")
plot(services_mohr.ig3,
vertex.color = "tomato",
vertex.shape = "square",
vertex.label.cex = .6,
vertex.label.color = "gray30",
edge.arrow.size=0.3,
edge.curved=0.3,
edge.color="gray60")
plot(identities_mohr.ig3,
vertex.color = "chartreuse4",
vertex.shape = "circle",
vertex.label.cex = .6,
vertex.label.color = "gray30",
edge.arrow.size=0.3,
edge.curved=0.3,
edge.color="gray60")
mohr.ig3 <- graph_from_biadjacency_matrix(mohr.matrix, directed = FALSE)
V(mohr.ig3)$type <- bipartite_mapping(mohr.ig3)$type
# bipartite_projection()
projected_mohr.ig3 <- bipartite_projection(mohr.ig3,
multiplicity= TRUE)
# multiplicity = TRUE: to keep the multiplicity of the edges
# as an edge attribute
# it returns two igraph objects denoted $proj1 and $proj2
projected_mohr.ig3
# store them as different objects
services_mohr.ig3 <- projected_mohr.ig3$proj1
services_mohr.ig3
identities_mohr.ig3 <- projected_mohr.ig3$proj2
identities_mohr.ig3
# plot parameters
services_mohr.ig3 <- subgraph(services_mohr.ig3, which(degree(services_mohr.ig3) > 0))
identities_mohr.ig3 <- subgraph(identities_mohr.ig3, which(degree(identities_mohr.ig3) > 0))
E(services_mohr.ig3)$color <- "lightgray" # edge color
E(identities_mohr.ig3)$color <- "lightgray" # edge color
coords3_s <- layout_with_fr(services_mohr.ig3)
coords3_i <- layout_with_fr(identities_mohr.ig3)
plot(services_mohr.ig3,
layout = coords3_s,
vertex.color = "tomato",
vertex.shape = "square",
vertex.label.cex = .6,
vertex.label.color = "gray30",
edge.arrow.size=0.3,
edge.curved=0.3,
edge.color="gray60")
plot(identities_mohr.ig3,
layout = coords3_i,
vertex.color = "chartreuse4",
vertex.shape = "circle",
vertex.label.cex = .6,
vertex.label.color = "gray30",
edge.arrow.size=0.3,
edge.curved=0.3,
edge.color="gray60")
service_matrix <- mohr.matrix %*% t(mohr.matrix)
diag(service_matrix) <- 0
service_matrix
service_overlap <- graph_from_adjacency_matrix(service_matrix,
mode = "undirected",
weighted = TRUE)
service_overlap
E(service_overlap)$weight
identities_matrix <- t(mohr.matrix) %*% mohr.matrix
diag(identities_matrix) <- 0
identities_matrix
# Create igraph object
identities_overlap <- graph_from_adjacency_matrix(identities_matrix,
mode = "undirected",
weighted = TRUE)
identities_overlap
E(identities_overlap)$weight
class(identities_overlap)
service_matrix <- mohr.matrix %*% t(mohr.matrix)
diag(service_matrix) <- 0
service_matrix
# Create igraph object
service_overlap.ig <- graph_from_adjacency_matrix(service_matrix,
mode = "undirected",
weighted = TRUE)
service_overlap.ig
E(service_overlap.ig)$weight
# second network
identities_matrix <- t(mohr.matrix) %*% mohr.matrix
diag(identities_matrix) <- 0
identities_matrix
# Create igraph object
identities_overlap.ig <- graph_from_adjacency_matrix(identities_matrix,
mode = "undirected",
weighted = TRUE)
identities_overlap.ig
E(identities_overlap.ig)$weight
# plot parameters
service_overlap.ig <- subgraph(service_overlap.ig, which(degree(service_overlap.ig) > 0))
identities_overlap.ig <- subgraph(identities_overlap.ig, which(degree(identities_overlap.ig) > 0))
E(service_overlap.ig)$color <- "lightgray" # edge color
E(identities_overlap.ig)$color <- "lightgray" # edge color
coords4_s <- layout_with_fr(service_overlap.ig)
coords4_i <- layout_with_fr(identities_overlap.ig)
plot(service_overlap.ig,
layout = coords4_s,
vertex.color = "tomato",
vertex.shape = "square",
vertex.label.cex = .6,
vertex.label.color = "gray30",
edge.arrow.size=0.3,
edge.curved=0.3,
edge.color="gray60")
plot(identities_overlap.ig,
layout = coords4_i,
vertex.color = "chartreuse4",
vertex.shape = "circle",
vertex.label.cex = .6,
vertex.label.color = "gray30",
edge.arrow.size=0.3,
edge.curved=0.3,
edge.color="gray60")
url1 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/affiliations_1996.txt"
affiliations96 <- read.delim(file = url1, check.names = FALSE)
# creating combined data frame
shared_var_names <- c("ids", "type", "missing96", "missing97")
shared <- rbind(attributes_students[, shared_var_names],
attributes_clubs[, shared_var_names])
url1 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/affiliations_1996.txt"
affiliations96 <- read.delim(file = url1, check.names = FALSE)
url2 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/attributes_students.txt"
attributes_students <- read.delim(file = url2, stringsAsFactors = FALSE)
url3 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/attributes_clubs.txt"
attributes_clubs <- read.delim(file = url3, stringsAsFactors = FALSE)
# creating combined data frame
shared_var_names <- c("ids", "type", "missing96", "missing97")
shared <- rbind(attributes_students[, shared_var_names],
attributes_clubs[, shared_var_names])
num_clubs <- nrow(attributes_clubs)
NA_dat_club <- rep(NA, num_clubs)
student_var_names <- c("race", "gender", "grade96", "grade97")
student_specific <- rbind(attributes_students[, student_var_names],
data.frame(race = NA_dat_club,
gender = NA_dat_club,
grade96 = NA_dat_club,
grade97 = NA_dat_club))
num_students <- nrow(attributes_students)
NA_dat_student <- rep(NA, num_students)
club_var_names<- c("club_type_detailed", "club_profile",
"club_feeder", "club_type_gender",
"club_type_grade")
club_specific <- rbind(data.frame(club_type_detailed = NA_dat_student,
club_profile = NA_dat_student,
club_feeder = NA_dat_student,
club_type_gender = NA_dat_student,
club_type_grade = NA_dat_student),
attributes_clubs[, club_var_names])
attributes_students_clubs <- cbind(shared, student_specific, club_specific)
attributes_students_clubs
View(attributes_students_clubs)
# creating combined data frame
shared_var_names <- c("ids", "type", "missing96", "missing97")
shared <- rbind(attributes_students[, shared_var_names],
attributes_clubs[, shared_var_names])
num_clubs <- nrow(attributes_clubs)
NA_dat_club <- rep(NA, num_clubs)
student_var_names <- c("race", "gender", "grade96", "grade97")
student_specific <- rbind(attributes_students[, student_var_names],
data.frame(race = NA_dat_club,
gender = NA_dat_club,
grade96 = NA_dat_club,
grade97 = NA_dat_club))
num_students <- nrow(attributes_students)
NA_dat_student <- rep(NA, num_students)
club_var_names<- c("club_type_detailed", "club_profile",
"club_feeder", "club_type_gender",
"club_type_grade")
club_specific <- rbind(data.frame(club_type_detailed = NA_dat_student,
club_profile = NA_dat_student,
club_feeder = NA_dat_student,
club_type_gender = NA_dat_student,
club_type_grade = NA_dat_student),
attributes_clubs[, club_var_names])
attributes_students_clubs <- cbind(shared, student_specific, club_specific)
# "Before we construct our igraph object, we first need to remove any students
# or clubs who were not in the school in the 1996 year
# (the focus of our analysis here)."
not_missing <- attributes_students_clubs$missing96 == 0
is_student <- attributes_students_clubs$type == "student"
not_missing_student <- not_missing[is_student]
is_club <- attributes_students_clubs$type == "club"
not_missing_club <- not_missing[is_club]
affiliations96_nomiss <- affiliations96[not_missing_student, not_missing_club]
attributes_nomiss <- attributes_students_clubs[not_missing, ]
# "We are now in position to create our two-mode graph in igraph. The function
# is graph_from_incidence_matrix(). The main arguments are incidence
# (the two-mode affiliation matrix) and mode. Here we set mode to "all",
# telling igraph to create mutual connections between student and club."
affil_net96 <- graph_from_incidence_matrix(incidence = affiliations96_nomiss,
mode = "all")
# creating combined data frame
shared_var_names <- c("ids", "type", "missing96", "missing97")
shared <- rbind(attributes_students[, shared_var_names],
attributes_clubs[, shared_var_names])
num_clubs <- nrow(attributes_clubs)
NA_dat_club <- rep(NA, num_clubs)
student_var_names <- c("race", "gender", "grade96", "grade97")
student_specific <- rbind(attributes_students[, student_var_names],
data.frame(race = NA_dat_club,
gender = NA_dat_club,
grade96 = NA_dat_club,
grade97 = NA_dat_club))
num_students <- nrow(attributes_students)
NA_dat_student <- rep(NA, num_students)
club_var_names<- c("club_type_detailed", "club_profile",
"club_feeder", "club_type_gender",
"club_type_grade")
club_specific <- rbind(data.frame(club_type_detailed = NA_dat_student,
club_profile = NA_dat_student,
club_feeder = NA_dat_student,
club_type_gender = NA_dat_student,
club_type_grade = NA_dat_student),
attributes_clubs[, club_var_names])
attributes_students_clubs <- cbind(shared, student_specific, club_specific)
# "Before we construct our igraph object, we first need to remove any students
# or clubs who were not in the school in the 1996 year
# (the focus of our analysis here)."
not_missing <- attributes_students_clubs$missing96 == 0
is_student <- attributes_students_clubs$type == "student"
not_missing_student <- not_missing[is_student]
is_club <- attributes_students_clubs$type == "club"
not_missing_club <- not_missing[is_club]
affiliations96_nomiss <- affiliations96[not_missing_student, not_missing_club]
attributes_nomiss <- attributes_students_clubs[not_missing, ]
# "We are now in position to create our two-mode graph in igraph. The function
# is graph_from_incidence_matrix(). The main arguments are incidence
# (the two-mode affiliation matrix) and mode. Here we set mode to "all",
# telling igraph to create mutual connections between student and club."
affil_net96 <- graph_from_biadjacency_matrix(incidence = affiliations96_nomiss,
mode = "all")
# Note: updated to graph_from_biadjacency_matrix() due to deprecation of
# graph_from_incidence_matrix() in igraph 1.6.0
type96 <- vertex_attr(affil_net96, "type")
table(type96)
class(attributes_clubs)
affil_net96
type96 <- vertex_attr(affil_net96, "type")
table(type96)
url1 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/affiliations_1996.txt"
affiliations96 <- read.delim(file = url1, check.names = FALSE)
url2 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/attributes_students.txt"
attributes_students <- read.delim(file = url2, stringsAsFactors = FALSE)
url3 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/attributes_clubs.txt"
attributes_clubs <- read.delim(file = url3, stringsAsFactors = FALSE)
# creating combined data frame
shared_var_names <- c("ids", "type", "missing96", "missing97")
shared <- rbind(attributes_students[, shared_var_names],
attributes_clubs[, shared_var_names])
num_clubs <- nrow(attributes_clubs)
NA_dat_club <- rep(NA, num_clubs)
student_var_names <- c("race", "gender", "grade96", "grade97")
student_specific <- rbind(attributes_students[, student_var_names],
data.frame(race = NA_dat_club,
gender = NA_dat_club,
grade96 = NA_dat_club,
grade97 = NA_dat_club))
num_students <- nrow(attributes_students)
NA_dat_student <- rep(NA, num_students)
club_var_names<- c("club_type_detailed", "club_profile",
"club_feeder", "club_type_gender",
"club_type_grade")
club_specific <- rbind(data.frame(club_type_detailed = NA_dat_student,
club_profile = NA_dat_student,
club_feeder = NA_dat_student,
club_type_gender = NA_dat_student,
club_type_grade = NA_dat_student),
attributes_clubs[, club_var_names])
attributes_students_clubs <- cbind(shared, student_specific, club_specific)
# "Before we construct our igraph object, we first need to remove any students
# or clubs who were not in the school in the 1996 year
# (the focus of our analysis here)."
not_missing <- attributes_students_clubs$missing96 == 0
is_student <- attributes_students_clubs$type == "student"
not_missing_student <- not_missing[is_student]
is_club <- attributes_students_clubs$type == "club"
not_missing_club <- not_missing[is_club]
affiliations96_nomiss <- affiliations96[not_missing_student, not_missing_club]
attributes_nomiss <- attributes_students_clubs[not_missing, ]
# "We are now in position to create our two-mode graph in igraph. The function
# is graph_from_incidence_matrix(). The main arguments are incidence
# (the two-mode affiliation matrix) and mode. Here we set mode to "all",
# telling igraph to create mutual connections between student and club."
affil_net96 <- graph_from_biadjacency_matrix(incidence = affiliations96_nomiss,
mode = "all")
# Note: updated to graph_from_biadjacency_matrix() due to deprecation of
# graph_from_incidence_matrix() in igraph 1.6.0
# These match FALSE = 938 (students) and TRUE = 91 (clubs)
#type96 <- vertex_attr(affil_net96, "type")
#table(type96)
affil_net96
type96 <- vertex_attr(affil_net96, "type")
table(type96)
affil_net96 <- set_vertex_attr(graph = affil_net96, name = "race",
value = attributes_nomiss$race)
affil_net96 <- set_vertex_attr(graph = affil_net96, name = "gender",
value = attributes_nomiss$gender)
affil_net96 <- set_vertex_attr(graph = affil_net96, name = "grade96",
value = attributes_nomiss$grade96)
affil_net96 <- set_vertex_attr(graph = affil_net96, name = "club_type_detailed",
value = attributes_nomiss$club_type_detailed)
affil_net96 <- set_vertex_attr(graph = affil_net96, name = "club_profile",
value = attributes_nomiss$club_profile)
V(affil_net96)$color[type96 == FALSE] <- rgb(red = 1, green = 0,
blue = 0, alpha = .5)
V(affil_net96)$color[type96 == TRUE] <- rgb(red = 0, green = 1,
blue = 0, alpha = .5)
V(affil_net96)$label <- V(affil_net96)$name # setting label of nodes
V(affil_net96)$label.color <- rgb(0, 0, .2, .5) # set the color of the labels
V(affil_net96)$label.cex <- .5 # make the labels of the nodes smaller
V(affil_net96)$size <- 6 # set size of nodes to 6
V(affil_net96)$frame.color <- V(affil_net96)$color # set color around nodes
E(affil_net96)$color <- rgb(.5, .5, 0, .2)
layout <- layout_with_fr(affil_net96, grid = "nogrid")
#pdf("magact_stdnt_actvts_1996.pdf")
plot(affil_net96, layout = layout)
#dev.off()
degree0 <- which(degree(affil_net96) == 0)
affil_net96_noisolates <- delete_vertices(affil_net96, degree0)
type96_noisolates <- vertex_attr(affil_net96_noisolates, "type")
table(type96_noisolates)
is_student_type <- type96_noisolates == FALSE
V(affil_net96_noisolates)$label[is_student_type] <- NA
V(affil_net96_noisolates)$color[is_student_type] <- rgb(1, 0, 0, .1)
V(affil_net96_noisolates)$size[is_student_type] <- 2
E(affil_net96_noisolates)$color <- rgb(.5, .5, 0, .05)
#pdf("magact_stdnt_actvts_1996_layout_with_kk.pdf")
plot(affil_net96_noisolates, layout = layout_with_kk)
#dev.off()
#pdf("magact_stdnt_actvts_1996_layout_with_fr.pdf")
plot(affil_net96_noisolates, layout = layout_with_fr)
#dev.off()
library(car)
race <- V(affil_net96_noisolates)$race[is_student_type]
student_node_color <- recode(race,
"'white' = 'red';
'Hispanic' = 'grey';
'Asian' = 'blue';
'black' = 'yellow';
'Native American' = 'black'")
V(affil_net96_noisolates)$color[is_student_type] <- student_node_color
V(affil_net96_noisolates)$frame.color[is_student_type] <- student_node_color
V(affil_net96_noisolates)$label[!is_student_type] <- NA
plot(affil_net96_noisolates)
affiliations96_nomiss <- as.matrix(affiliations96_nomiss)
club_club96 <- t(affiliations96_nomiss) %*% affiliations96_nomiss
# club_club96[1:5, 1:5]
# dim(club_club96)
student_student96 <- affiliations96_nomiss %*% t(affiliations96_nomiss)
student_student96[1:5, 1:5]
# dim(student_student96)
onemode96 <- bipartite_projection(affil_net96)
# the club-to-club network
club_net96 <- onemode96$proj2
club_names <- V(club_net96)$name
# length(club_names)
mat <- as_adjacency_matrix(graph = club_net96, attr = "weight", sparse = F)
mat[1:5, 1:5]
V(club_net96)$label.color <- rgb(0, 0, .2, .8)
V(club_net96)$label.cex <- .60
V(club_net96)$size <- 6
V(club_net96)$color <- rgb(0, 0, 1, .3)
V(club_net96)$frame.color <- V(club_net96)$color
egalpha <- log1p(E(club_net96)$weight) / max(log1p(E(club_net96)$weight) * 2)
E(club_net96)$color <- rgb(.25, .75, 0, egalpha)
# again commenting out the pdf file device for the sake of the assignment
# pdf("magact_stdnt_actvts_1996_clubs.pdf")
plot(club_net96, main = "layout_with_lgl", layout = layout_with_lgl)
plot(club_net96, main = "layout_with_fr", layout = layout_with_fr)
# dev.off()
V(club_net96)$label.color <- rgb(0, 0, .2, .8)
V(club_net96)$label.cex <- .60
V(club_net96)$size <- 6
V(club_net96)$color <- rgb(0, 0, 1, .3)
V(club_net96)$frame.color <- V(club_net96)$color
egalpha <- log1p(E(club_net96)$weight) / max(log1p(E(club_net96)$weight) * 2)
E(club_net96)$color <- rgb(.25, .75, 0, egalpha)
# again commenting out the pdf file device for the sake of the assignment
pdf("magact_stdnt_actvts_1996_clubs.pdf")
plot(club_net96, main = "layout_with_lgl", layout = layout_with_lgl)
plot(club_net96, main = "layout_with_fr", layout = layout_with_fr)
dev.off()
std_weight <- sd(E(club_net96)$weight)
weight_mean_center <- (E(club_net96)$weight - mean(E(club_net96)$weight))
recode_weight <- E(club_net96)$weight
recode_weight[weight_mean_center <= 0] <- -1
recode_weight[(weight_mean_center > 0) & (weight_mean_center <= std_weight)] <- .5
recode_weight[(weight_mean_center > std_weight) &
(weight_mean_center <= std_weight * 2)] <- 1.5
recode_weight[weight_mean_center > std_weight * 2] <- 2.5
# apply our new weighting scheme to the widths of the edges
E(club_net96)$color <- rgb(.5, .5, 0, .2)
E(club_net96)$width <- recode_weight
V(club_net96)$size <- 3
plot(club_net96, layout = layout_with_lgl)
setwd("~/Harvard CS50/HW/testVisual")
my_packages <- c("tidyverse",
"ggplot2") # create vector of packages
invisible(lapply(my_packages, require, character.only = TRUE)) # load multiple packages
rm(list = ls()) # clean memory
location = "https://github.com/DACSS-Visual/tabular_bivar_catcat/raw/main/data/"
file = 'crime.RData'
link = paste0(location,file)
#getting the data TABLE from the file in the cloud:
load(file = url(link))
names(crime)
str(crime,width = 70, strict.width='cut')
summary(crime$year)
# filter for specific years
yearsSelected = 2011:2015
subCrime = crime[crime$year %in% yearsSelected, ]
subCrime = subCrime[complete.cases(subCrime), ]
# The goal is to find a visualization to represent the behavior of
# a numerical variable in each level of a categorical variable.
# Let’s choose one of each and see the descriptives:
tapply(subCrime$DaysToReport, subCrime$Precinct, summary)
install.packages("ggpubr")
my_packages <- c("tidyverse",
"ggplot2",
"ggpubr") # create vector of packages
invisible(lapply(my_packages, require, character.only = TRUE)) # load multiple packages
baseDay = ggplot(data = subCrime,
aes(x = Precinct,
y = DaysToReport))
boxDay = baseDay + geom_boxplot() +
labs(title = "daily")
baseWeek = ggplot(data = subCrime[subCrime$DaysToReport > 7, ],
aes(x = Precinct,
y = DaysToReport))
boxWeek = baseWeek + geom_boxplot() +
labs(title = "> week")
baseMonth = ggplot(data = subCrime[subCrime$DaysToReport > 30, ],
aes(x = Precinct,
y = DaysToReport))
boxMonth = baseMonth + geom_boxplot() +
labs(title = "> month")
baseYear = ggplot(data = subCrime[subCrime$DaysToReport > 365, ],
aes(x = Precinct,
y = DaysToReport))
boxYear = baseYear + geom_boxplot() +
labs(title = "> year")
ggarrange(boxDay, boxWeek, boxMonth, boxYear)
# Let’s build our visual from the crimes that took ONE year or longer to report.
crimePrecinct = subCrime[subCrime$DaysToReport >= 365, ]
crimePrecinct$yearsToReport = crimePrecinct$DaysToReport / 365
# In general, we want to see if the distribution is different across levels:
kruskal.test(yearsToReport ~ Precinct, data = crimePrecinct)
# There is a significant probability (0.1) that some precinct is different
# from another; this can be identified here:
pairwise.wilcox.test(crimePrecinct$yearsToReport, crimePrecinct$Precinct)
baseBox + geom_boxplot(aes(x = reorder(Precinct, yearsToReport, median))) +
coord_flip()
baseBox = ggplot(data = crimePrecinct,
aes(y = yearsToReport))
baseBox + geom_boxplot(aes(x = reorder(Precinct, yearsToReport, median))) +
coord_flip()
# Density plots?
ggplot(crimePrecinct) +
geom_density(aes(x = yearsToReport), show.legend = F) +
facet_grid(reorder(Precinct, yearsToReport, media) ~ .)
# Density plots?
ggplot(crimePrecinct) +
geom_density(aes(x = yearsToReport), show.legend = F) +
facet_grid(reorder(Precinct, yearsToReport, median) ~ .)
# Histogram?
baseHist = ggplot(data = crimePrecinct,
aes(x = yearsToReport))
baseHist + geom_histogram() + facet_grid(reorder(Precinct, yearsToReport, median) ~ .)
# Density plots?
ggplot(crimePrecinct) +
geom_density(aes(x = yearsToReport), show.legend = F) +
facet_grid(reorder(Precinct, yearsToReport, median) ~ .)
baseHist + geom_histogram() + facet_grid(reorder(Precinct, yearsToReport, median) ~ .)
# Density plots?
ggplot(crimePrecinct) +
geom_density(aes(x = yearsToReport), show.legend = F) +
facet_grid(reorder(Precinct, yearsToReport, median) ~ .)
linkMass="https://github.com/DACSS-Visual/tabular_bivar_catcat/raw/refs/heads/main/data/MSP%20DFS%20Arrests%2019-20Q1.xlsx"
#see it
library(rio)
arrests=rio::import(linkMass,which = 1)
install.packages("rio")
my_packages <- c("tidyverse",
"ggplot2",
"ggpubr",
"rio") # create vector of packages
invisible(lapply(my_packages, require, character.only = TRUE)) # load multiple packages
#see it
arrests = rio::import(linkMass,which = 1)
head(arrests)
